name: Build & Release - All supported platforms

on:
  push:
    tags:
      - '*'

jobs:
  # job_1:
  #   name: rexds_x86-64-unknown-freebsd
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         path: main
  #     - name: Install Rust Toolchain
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #           toolchain: stable
  #           target: x86_64-unknown-freebsd
  #           components: rustfmt, clippy
  #     - name: cargo build
  #       shell: bash
  #       run: |
  #         cd /home/runner/work/rex-dev-server/rex-dev-server/main && cargo build --release --target x86_64-unknown-freebsd
  #     - name: Results
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: rexds_${{ github.ref_name }}_x86-64-unknown-freebsd
  #         path: /home/runner/work/rex-dev-server/rex-dev-server/main/target/x86_64-unknown-freebsd/release/rexds
  
  # job_2: 
  #   name: Linux ARM64 musl
  #   runs-on: ubuntu-latest
  #   env:
  #     RUSTFLAGS: -C linker=musl-gcc
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         path: main
  #     - name: Install Rust Toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #           toolchain: stable
  #           target: aarch64-unknown-linux-musl
  #           components: rustfmt, clippy
  #     - name: musl tools
  #       shell: bash
  #       run: sudo apt-get update && sudo apt-get install musl-tools
  #     - name: cargo build
  #       shell: bash
  #       run: |
  #         cd /home/runner/work/rex-dev-server/rex-dev-server/main && cargo build --release --target aarch64-unknown-linux-musl
  #     - name: Results
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: Linux-ARM64-musl
  #         path: /home/runner/work/rex-dev-server/rex-dev-server/main/target/aarch64-unknown-linux-musl/release/rexds

  rexds-linux-x64-musl:
    runs-on: ubuntu-latest
    env: 
      SCCACHE_BUCKET: sccache-rexds-linux-x64-musl
      SCCACHE_ENDPOINT: ${{ secrets.SCCACHE_ENDPOINT }}
      SCCACHE_S3_USE_SSL: true
      SCCACHE_REGION: auto
      RUSTC_WRAPPER: sccache
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: main

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
            toolchain: stable
            target: x86_64-unknown-linux-musl
            components: rustfmt, clippy

      - name: install musl tools
        shell: bash
        run: sudo apt-get update && sudo apt-get install musl musl-dev musl-tools

      - name: install sccache
        shell: bash
        run: |
          curl -L https://github.com/mozilla/sccache/releases/download/v0.5.4/sccache-v0.5.4-x86_64-unknown-linux-musl.tar.gz | tar xz
          sudo mv sccache-v0.5.4-x86_64-unknown-linux-musl/sccache /usr/local/bin/
          which sccache

      - name: cargo build
        shell: bash
        run: |
          cd /home/runner/work/rex-dev-server/rex-dev-server/main && cargo build --release --target x86_64-unknown-linux-musl

      - name: Check if static
        run: ldd /home/runner/work/rex-dev-server/rex-dev-server/main/target/x86_64-unknown-linux-musl/release/rexds

      - name: Check sccache stats
        run: sccache --show-stats

      - name: Results
        uses: actions/upload-artifact@v3
        with:
          name: rexds_${{ github.ref_name }}_x86-64-unknown-linux-musl
          path: /home/runner/work/rex-dev-server/rex-dev-server/main/target/x86_64-unknown-linux-musl/release/rexds

  rexds-windows-x64:
    runs-on: windows-latest
    env: 
      SCCACHE_BUCKET: sccache-rexds-windows-x64
      SCCACHE_ENDPOINT: ${{ secrets.SCCACHE_ENDPOINT }}
      SCCACHE_S3_USE_SSL: true
      SCCACHE_REGION: auto
      RUSTC_WRAPPER: sccache
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: main

      # - name: Install Rust Toolchain
      #   uses: dtolnay/rust-toolchain@stable
      #   with:
      #       toolchain: stable
      #       target: x86_64-pc-windows-msvc
      #       components: rustfmt, clippy

      - name: Install Rustup using win.rustup.rs
        run: |
          # Disable the download progress bar which can cause perf issues
          $ProgressPreference = "SilentlyContinue"
          Invoke-WebRequest https://win.rustup.rs/x86_64 -OutFile rustup-init.exe
          .\rustup-init.exe -y --default-host=x86_64-pc-windows-msvc --default-toolchain=stable
          del rustup-init.exe
          rustup target add x86_64-pc-windows-msvc
        shell: powershell

      - name: Fetch and setup sccache
        run: |
          Invoke-WebRequest -Uri "https://github.com/mozilla/sccache/releases/download/v0.5.4/sccache-v0.5.4-x86_64-pc-windows-msvc.tar.gz" -OutFile "sccache.tar.gz"
          tar -xf sccache.tar.gz
          Move-Item -Path ".\sccache-v0.5.4-x86_64-pc-windows-msvc\sccache.exe" -Destination "$env:GITHUB_WORKSPACE"
          
          # Checking the existence of sccache.exe after moving
          if (Test-Path "$env:GITHUB_WORKSPACE\sccache.exe") {
            Write-Output "sccache.exe is present in workspace"
          } else {
            Write-Output "sccache.exe is NOT present in workspace"
            exit 1
          }
      
          # Append the workspace to the GITHUB_PATH to make sccache available globally
          echo "$env:GITHUB_WORKSPACE" | Out-File -Append $env:GITHUB_PATH
      
          sccache --version
        shell: powershell

      - name: cargo build
        shell: powershell
        run: |
          cd D:/a/rex-dev-server/rex-dev-server/main
          cargo --version
          rustc --version
          echo $env:path --split ";"
          cargo build --release --target x86_64-pc-windows-msvc
        env:
          RUSTC_WRAPPER: sccache

      - name: Check sccache stats
        run: sccache --show-stats

      - name: Results
        uses: actions/upload-artifact@v3
        with:
          name: rexds_${{ github.ref_name }}_x86-64-pc-windows-msvc
          path: D:/a/rex-dev-server/rex-dev-server/main/target/x86_64-pc-windows-msvc/release/rexds.exe

  rexds-darwin-x64:
    runs-on: macOS-latest
    env: 
      SCCACHE_BUCKET: sccache-rexds-darwin-x64
      SCCACHE_ENDPOINT: ${{ secrets.SCCACHE_ENDPOINT }}
      SCCACHE_S3_USE_SSL: true
      SCCACHE_REGION: auto
      RUSTC_WRAPPER: sccache
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: main

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
            toolchain: stable
            target: aarch64-apple-darwin
            components: rustfmt, clippy

      - name: install sccache
        shell: bash
        run: |
          curl -L https://github.com/mozilla/sccache/releases/download/v0.5.4/sccache-v0.5.4-x86_64-apple-darwin.tar.gz | tar xz
          sudo mv sccache-v0.5.4-x86_64-apple-darwin/sccache /usr/local/bin/
          which sccache

      - name: cargo build
        shell: bash
        run: |
          cd /Users/runner/work/rex-dev-server/rex-dev-server/main && cargo build --release --target x86_64-apple-darwin

      - name: List dynamic dependencies for macOS binary
        run: |
          echo "Listing dynamic libraries for the binary:"
          otool -L /Users/runner/work/rex-dev-server/rex-dev-server/main/target/x86_64-apple-darwin/release/rexds
          
      - name: Check sccache stats
        run: sccache --show-stats

      - name: Results
        uses: actions/upload-artifact@v3
        with:
          name: rexds_${{ github.ref_name }}_x86-64-apple-darwin
          path: /Users/runner/work/rex-dev-server/rex-dev-server/main/target/x86_64-apple-darwin/release/rexds

  rexds-darwin-arm64:
    runs-on: macOS-latest 
    env: 
      SCCACHE_BUCKET: sccache-rexds-darwin-arm64
      SCCACHE_ENDPOINT: ${{ secrets.SCCACHE_ENDPOINT }}
      SCCACHE_S3_USE_SSL: true
      SCCACHE_REGION: auto
      RUSTC_WRAPPER: sccache
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: main

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
            toolchain: stable
            target: aarch64-apple-darwin
            components: rustfmt, clippy

      - name: install sccache
        shell: bash
        run: |
          curl -L https://github.com/mozilla/sccache/releases/download/v0.5.4/sccache-v0.5.4-x86_64-apple-darwin.tar.gz | tar xz
          sudo mv sccache-v0.5.4-x86_64-apple-darwin/sccache /usr/local/bin/
          which sccache

      - name: cargo build
        shell: bash
        run: |
          cd /Users/runner/work/rex-dev-server/rex-dev-server/main && cargo build --release --target aarch64-apple-darwin
        
      - name: Check sccache stats
        run: sccache --show-stats

      - name: Results
        uses: actions/upload-artifact@v3
        with:
          name: rexds_${{ github.ref_name }}_aarch64-apple-darwin
          path: /Users/runner/work/rex-dev-server/rex-dev-server/main/target/aarch64-apple-darwin/release/rexds

  upload-to-cloudflare-r2:
    needs: [rexds-linux-x64-musl, rexds-windows-x64, rexds-darwin-x64, rexds-darwin-arm64]
    runs-on: ubuntu-latest

    steps:
    - name: Install updates + curl
      shell: bash
      run: |
        sudo apt-get update && sudo apt-get install -y curl

    - name: rclone install
      shell: bash
      run: sudo -v ; curl https://rclone.org/install.sh | sudo bash

    - name: Configure rclone
      shell: bash
      run: |
        rclone config create releases s3 \
        provider Cloudflare \
        access_key_id "${{ secrets.CF_KEY_ID }}" \
        secret_access_key "${{ secrets.CF_ACCESS_KEY }}" \
        endpoint "https://08b93c93f8b7adc43678e9afba31e4ee.r2.cloudflarestorage.com" \
        acl private

    - name: Download all artifacts
      uses: actions/download-artifact@v2

    - name: Make dist folder & compress artifacts
      shell: bash
      run: |
        mkdir -p dist
        for dir in */; do
          if [[ "$dir" != "dist/" ]]; then
            tar -czvf "dist/${dir%/}.tar.gz" "$dir"
          fi
        done

    - name: Copy artifacts to r2 bucket
      run: rclone copy ./dist releases:rex-releases


  publish-linux-x64-to-npm:
    needs: [upload-to-cloudflare-r2]
    runs-on: ubuntu-latest      
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      CURRENT_TAG: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Install jq
        shell: bash
        run: |
          sudo apt-get install jq -y

      - name: Prepare rexds-linux-x64-musl's package.json and copy binary artifact
        shell: bash
        run: |
          jq ". + {version: \"${{ env.CURRENT_TAG }}\"}" npm/rexds-linux-x64-musl/package.json > npm/rexds-linux-x64-musl/package.tmp.json && mv npm/rexds-linux-x64-musl/package.tmp.json npm/rexds-linux-x64-musl/package.json
          cp rexds_${{ env.CURRENT_TAG }}_x86-64-unknown-linux-musl/rexds npm/rexds-linux-x64-musl/rexds

      - name: Configure npm & publish
        run: |
          cd npm/rexds-linux-x64-musl
          echo '//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}' > .npmrc
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}


  publish-windows-x64-to-npm:
    needs: [upload-to-cloudflare-r2]
    runs-on: ubuntu-latest      
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      CURRENT_TAG: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Install jq
        shell: bash
        run: |
          sudo apt-get install jq -y

      - name: Prepare rexds-windows-x64's package.json and copy binary artifact
        shell: bash
        run: |
          jq ". + {version: \"${{ env.CURRENT_TAG }}\"}" npm/rexds-windows-x64/package.json > npm/rexds-windows-x64/package.tmp.json && mv npm/rexds-windows-x64/package.tmp.json npm/rexds-windows-x64/package.json
          cp rexds_${{ env.CURRENT_TAG }}_x86-64-pc-windows-msvc/rexds.exe npm/rexds-windows-x64/rexds.exe

      - name: Configure npm & publish
        run: |
          cd npm/rexds-windows-x64
          echo '//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}' > .npmrc
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-darwin-x64-to-npm:
    needs: [upload-to-cloudflare-r2]
    runs-on: ubuntu-latest      
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      CURRENT_TAG: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Install jq
        shell: bash
        run: |
          sudo apt-get install jq -y

      - name: Prepare rexds-darwin-x64's package.json and copy binary artifact
        shell: bash
        run: |
          jq ". + {version: \"${{ env.CURRENT_TAG }}\"}" npm/rexds-darwin-x64/package.json > npm/rexds-darwin-x64/package.tmp.json && mv npm/rexds-darwin-x64/package.tmp.json npm/rexds-darwin-x64/package.json
          cp rexds_${{ env.CURRENT_TAG }}_x86-64-apple-darwin/rexds npm/rexds-darwin-x64/rexds

      - name: Configure npm & publish
        run: |
          cd npm/rexds-darwin-x64
          echo '//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}' > .npmrc
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-darwin-arm64-to-npm:
    needs: [upload-to-cloudflare-r2]
    runs-on: ubuntu-latest      
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      CURRENT_TAG: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Install jq
        shell: bash
        run: |
          sudo apt-get install jq -y

      - name: Prepare rexds-darwin-arm64's package.json and copy binary artifact
        shell: bash
        run: |
          jq ". + {version: \"${{ env.CURRENT_TAG }}\"}" npm/rexds-darwin-arm64/package.json > npm/rexds-darwin-arm64/package.tmp.json && mv npm/rexds-darwin-arm64/package.tmp.json npm/rexds-darwin-arm64/package.json
          cp rexds_${{ env.CURRENT_TAG }}_aarch64-apple-darwin/rexds npm/rexds-darwin-arm64/rexds

      - name: Configure npm & publish
        run: |
          cd npm/rexds-darwin-arm64
          echo '//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}' > .npmrc
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-main-to-npm:
    needs: [publish-windows-x64-to-npm, publish-linux-x64-to-npm, publish-darwin-x64-to-npm, publish-darwin-arm64-to-npm]
    runs-on: ubuntu-latest      
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      CURRENT_TAG: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Install jq
        shell: bash
        run: |
          sudo apt-get install jq -y

      - name: Prepare package.json
        shell: bash
        run: |
          jq ". + {version: \"${{ env.CURRENT_TAG }}\"}" npm/rexds/package.json > npm/rexds/package.tmp.json && mv npm/rexds/package.tmp.json npm/rexds/package.json

      - name: Configure npm & publish
        run: |
          cd npm/rexds
          echo '//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}' > .npmrc
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}